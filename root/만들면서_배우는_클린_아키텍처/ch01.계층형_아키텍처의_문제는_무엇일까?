계층형 아키텍처에서 전통적인 규칙은, 같은 계층의 컴포넌트와 하위 계층의 컴포넌트에 접근할 수 있다는 것이다.

그러나 계층형 아키텍처는 잘못된 방향으로 흘러갈 가능성을 용인한다. 

영속성 계층에 대한 종속성으로 **유즈케이스 설계에 어려움**이 있으며 **책임이 섞이게** 될 문제점이 있다.

1. 결론적으로 영속성 계층에 많은 의존을 하게 된다.
2. 영속성 계층과 도메인 계층은 높은 종속성으로 인해 또 다른 유즈 케이스를 추가하고자 할 때 종속성을 이해하는데 시간이 걸린다. 이는 유연하고 선택의 폭을 넓혀준다던 계층형 아키텍처의 목표와 멀어진다.
3. 계층형 아키텍쳐는 도메인 서비스의 너비에 관한 규칙을 강제하지 않아, 여러개의 유즈케이스를 담당하는 매우 넓은 서비스가 형성될 수 있다.
4. 계층을 건너뛰는 형태로 개발된다면(웹 계층에서 영속성 계층 접근), 테스트를 하고자 할 때, 도메인 계층과 영속성 계층의 목데이터를 생성해야하고, 종속성을 이해하는데 많은 시간이 걸릴 수 있다. 또한 전반적으로 책임이 섞이게 되고 복잡한 형태의 아키텍처로 변할 가능성이 있다.
    
    ![](https://github.com/uneap/TIL/blob/main/img/Untitled%20(87).png/?raw=true)
    
5. 계층형 아키텍처는 모든 것이 영속성 계층 위에 만들어지므로, 계층별로 작업하기 어렵다. 데이터베이스 주도 설계는 영속성 계층이 도메인 로직과 섞여있어, 개별적으로 작업하기 어렵다.

결론적으로, 어떤 아키텍처로 만들던 간에 계층형 아키텍처의 함정을 염두해둔다면, 유지보수가 더 쉬운 솔루션을 만드는데 도움이 될 수 있다.